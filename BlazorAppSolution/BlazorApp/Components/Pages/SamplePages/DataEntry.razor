@page "/dataentry"
@rendermode InteractiveServer
<PageTitle>Data Entry</PageTitle>

<!-- this namespace is needed because we are using classes from the OOPsReview namespace-->
@using OOPsReview;

<h1>Data Entry</h1>
<h4>Employment data collection to a csv file</h4>

@*
    we wish to add a blockquote but center the control on the page
    to do so, we will use bootstrap formatting with rows/columns
*@

<div class="row">
    <div class="offset-1 col-md-10">
        <blockquote style="background-color:gainsboro;">
            <p>
                This component will demonstrate how your page can handle validation of data input,
                showing validation messages when you have a number of controls for data entry. This
                component will validate the local controls and create any validation messages for
                invalid data. The messages can be collected using various techniques such as: List or
                Dictionary.
            </p>
            <p>
                This page will input data for an instance of the Employment class. This demo will
                use the Employment class from the OOPs review. The SupervisoryLevel enum
                class will also be brought into this project. One could have included the entire
                class library as part of this solution instead of bringing in individual classes.
            </p>
        </blockquote>
    </div>
</div>

@*
    feedback area
        success messages
        error messages
*@

<!--
Success area
check if there is a feedback message, if so display it

also could use: if(feedBackMsg.Length > 0)
-->
@if (!string.IsNullOrWhiteSpace(feedBackMsg))
{
    <div class="alert alert-success text-center">
        <p>@feedBackMsg</p>
    </div>
}

<!--
Error Message area
check if there are any error messages, if so display them
-->

@if(errorMsgs.Count > 0)
{
    <div class="alert alert-danger">
        <p>Please fix the following issues:</p>
        <ul>
            @foreach(var error in errorMsgs)
            {
                <!--
                    due to the structure of a Dictionary entry
                    there are two components: key and value
                    Here we wish to just use the value

                    If this was a List collection there is only
                    one component, the string
                    therefore you would NOT need the .Value
                    -->
                <li>@error.Value</li>
            }
        </ul>
    </div>
}

<!--
form area
standard html controls
use bootstrap for formatting
each control will be on a separate row
each row is stack top to bottom
-->

<fieldset>
    <legend>Employment Data</legend>
    <!--
    the structure of a row will contain 2 logic columns (the 4 of the 12 physical columns)
    1) will contain the label for the data entry
    2) will contain the input control for the data entry

    so to center the 2 logic columns, we will skip over the first 4 physical columns
    to do so use class: offset-n where n is 1 to 11
    -->
    <div class="row">
        <div class="offset-4 col-md-2">
            <label for="title">Position Title</label>
        </div>
        <div class="col-md-2">
            <input id="title" type="text" @bind="empTitle"
                placeholder="enter position" />
        </div>
    </div>
    <br />
    <div class="row">
        <div class="offset-4 col-md-2">
            <label for="years">Years in Position</label>
        </div>
        <div class="col-md-2">
            <!--
                step is required so that the number can be entered with a decimal place
                by default number type input controls are whole numbers
                by default the step of the control is 1
            -->
            <input id="years" type="number" @bind="empYears"
                   placeholder="eg 3.4"
                   style="width: 75px;"
                   step="0.1"/>
        </div>
    </div>
    <br />
    <div class="row">
        <div class="offset-4 col-md-2">
            <label for="startdate">Start Date</label>
        </div>
        <div class="col-md-2">
            <input id="startdate" type="date" @bind="empStartDate"/>
        </div>
    </div>
    <br />
    <!-- the SupervisoryLevel will be implemented using two different styles-->
    <div class="row">
        <div class="offset-4 col-md-2">
            <label for="levelS">Supervisory Level</label>
        </div>
        <div class="col-md-2">
           <select id="levelS" @bind="empLevelS">
                <!-- the user must choose a supervisory level, therefore
                 there is no need for a prompt line on this select
                 -->
                <!--
                there is a line for each item in the Enum
                you could hard-code each option tag

                <option value="Entry"/>
                <option value="TeamMember">TeamMember</option>
                <option value="TeamLeader">TeamLeader</option>
                <option value="Supervisory">Supervisory</option>
                <option value="DepartmentHead">DepartmentHead</option>
                <option value="Owner">Owner</option>
                -->
                <!--
                you can also access the Enum definition and
                extract each enum value (treating the Enum as a collection)
                -->
                @foreach(var item in Enum.GetValues(typeof(SupervisoryLevel)))
                {
                    //the SupervisoryLevel enum values are in an array collection
                    <option value="@item">@item</option>
                }
            </select>
        </div>
    </div>
    <br />
    <div class="row">
        <div class="offset-4 col-md-2">
            <label for="levelR">Supervisory Level</label>
        </div>
        <div class="col-md-2">
            <!-- we wish to select from a set of defined choices
             this will limit the user to ONLY acceptable values

             this control is not a standard html input control
             this control is a Blazor control
             this control needs to use bind-value instead of just bind
             -->
            <InputRadioGroup Name="supervisoryradio" id="levelR" @bind-Value="empLevelR">    
                @foreach (var item in Enum.GetValues(typeof(SupervisoryLevel)))
                {
                    //the SupervisoryLevel enum values are in an array collection
                    <InputRadio Name="supervisoryradio" Value="@item" /> @($"  {item.ToString()}")<br/>
                }
            </InputRadioGroup>
        </div>
    </div>
    <br/>
    <div class="row">
        <!--
            this formatting is combining all the physical cells of a row in one large logical cell
            the logical cell will take up the enter row
            this allows for center text within the cell
        -->
        <div class="col-md-12 text-center">
            <button type="submit" class="btn btn-outline-primary rounded-pill"
                    @onclick="OnCollect">
                Submit
            </button>
            &nbsp;&nbsp;
            <button type="submit" class="btn btn-outline-secondary rounded-pill"
                    @onclick="OnClear">
                Clear
            </button>
        </div>
    </div>
</fieldset>

@code {
    private string feedBackMsg = "";

    //could be using a List<string> as well as this Dictionary
    //private List<string> errorMsgs = new ();

    //the Dictionary has a structure of 2 values: TKey (acts like a primary key)
    //                                            TValue which is the string associated with the key
    //one could search the dictionary on the TKey value and retrieve the TValue string
    //NOTE: the TKey value MUST be unique within the entries of the Dictionary
    //datatypes for Tkey and TValue can be any C# datatype

    Dictionary<int, string> errorMsgs = new();

    //Employment data entry control variables
    private string empTitle;
    private double empYears = 0.0;
    private DateTime empStartDate;

    //for the SupervisoryLevel, the form will implement the control
    // in two styles: as a list (select) and as a set of RadioButtons
    //only one of the variable will be used for actual data collection

    //this Enum is a datatype under a different namespace
    //when this happens you need to include the missing namespace (see top of this file)

    private SupervisoryLevel empLevelS; //html select control

    private SupervisoryLevel empLevelR; //radio buttons

    private Employment employment; //this variable will be used to create the data record to be used
    //   in saving the good data from the form

    //Injection variable
    [Inject]
    public IWebHostEnvironment webHostEnvironment { get; set; }

    protected override void OnInitialized()
    {
        //leave the base call in so that the default initialization is done
        base.OnInitialized();

        //do your own customized intialization
        empStartDate = DateTime.Today;
    }

    protected void OnCollect()
    {
        //clear out all old messages
        feedBackMsg = "";
        errorMsgs.Clear();

        //primitive validation
        //  presence
        //  datatype/pattern
        //  range of values

        //Business Rules (aka your validation requirements)
        //title must be presence, must have at least one character
        //start date cannot be in the future
        //years cannot be less than zero

        if (string.IsNullOrWhiteSpace(empTitle))
        {
            //add a entry to the errorMsgs (dictionary)
            errorMsgs.Add(1, "Title is required");
        }

        //concern:
        // if the empStartDate is filled by some process that include time
        //      one need to be careful about using .Today
        // DateTime.Today uses 00:00:00 am as the time
        // DateTime.Now uses hh:mm:ss am/pm as the time
        //Problem is 2025/10/25 08:30:00 am greater than 2025/10/25 00:00:00 am? Answer: YES!!!!!
        //Solution to ignore the time of the day
        //  on solution is to add 1 to Today and thus the day will be the start of the next day
        if (empStartDate >= DateTime.Today.AddDays(1))
        {
            errorMsgs.Add(2, "Date cannot be in the future.");
        }

        if(empYears < 0) 
        {
            errorMsgs.Add(3, "Years cannot be less than zero");
        }

        //is the data good?
        //should I continue processing this data?
        if (errorMsgs.Count == 0)
        {
            //what to do with the valid data???
            //in this example, we will save the data to a csv file.
            //the csv record layout will be the layout in the Employment ToString()

            //if you are using a class to collect and hold your data
            //      you need to be concerned with how the class coding handles
            //      any errors in creating or processing data within the class
            //this normally means some type of try/catch processing (user friendly error handling)
            try
            {
                //create an instance of Employment to use to write to the data file
                //the data file record will use the ToString() of Employment
                //(Note: you could manually in this method create the concatenated string for
                //      writing)
                //Remember if an error occurs while creating your instance, the instance will
                //  throw an exception; which should be caught by the catches below.
                employment = new Employment(empTitle, empLevelS, empStartDate, empYears);

                //write the class data as a string to a csv text file
                // required:
                // a) know the location of the file (name)
                // b) the technique to use in writing to the file
                //    there are several ways to write to the file
                //      a) StreamWriter/StreamReader
                //      b) using the System.IO.File methods
                //           (handles the streaming of the data)

                //there are a couple of ways to refer to your file and its path
                //  i) obtain the root path of your application using an injection
                //      service called IWebHostEnvironment via property injection (see variables)
                //  ii) use relative addressing starting a the top of your application (see report page)

                string appPathName = webHostEnvironment.ContentRootPath; //the top of  the web application

                //WARNING: the folder slash for your path can be both a forward or back slash
                //              on a PC BUT for an Apple machine, you must use the forward slash (/)
                string csvFilePathName = $@"{appPathName}/Data/GoodEmployment.csv";

                //Prep line to write to the file

                //write the data from the employment instance (ToString) as a line to the csv file
                //since the string does not contain a line feed character, we will need to concatenate
                //  the character (\n)
                string line = $"{employment.ToString()}\n";

                //Write to the file

                //WARNING: when you use the System.IO.File you MUST use the
                //          fully qualified naming to the class method you wish
                //          to use.
                //          Fully qualified naming includes namespace.methodOrProperty
                //         you can not get by just using a reference to the
                //           namespace at the top of your code (using System.IO;)

                //the System.IO.File method will be AppendAllText(filepathname,string)
                // AppendAllText will
                //   a) create the file if it does not exist
                //   b) opens
                //   c) writes the text
                //   d) closes
                System.IO.File.AppendAllText(csvFilePathName, line);

                //talk to your user
                feedBackMsg = "Submit accepted";

            }
            catch (ArgumentNullException ex)
            {
                //is a specific error message for a specific error type
                errorMsgs.Add(5, $"Data Missing Error: {ex.Message}");
            }
            catch (ArgumentException ex)
            {
                //is a specific error message for a specific error type
                errorMsgs.Add(5, $"Bad Data Value Error: {ex.Message}");
            }
            catch (Exception ex)
            {
                //is the default general bucket for all error messages
                errorMsgs.Add(4, $"System Error: {ex.Message}");
            }
           
        }
    }

    protected void OnClear()
    {
        //clear out all old messages
        feedBackMsg = "";
        errorMsgs.Clear();

        //reset all of the data entry field to their opening state
        empTitle = "";
        empStartDate = DateTime.Today;
        empYears = 0.0;
        empLevelR = SupervisoryLevel.Entry;
        empLevelS = SupervisoryLevel.Entry;
    }

  
}
